model ProjectCost {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @db.Uuid
  amount      Decimal  @db.Decimal(15, 2)
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_costs")
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                  String                 @unique
  password               String
  name                   String
  role                   String                 @default("USER")
  isActive               Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  id                     String                 @id @default(uuid()) @db.Uuid
  failedLoginAttempts    Int?                   @default(0)
  isDeleted              Boolean                @default(false)
  lastLogin              DateTime?
  lockedUntil            DateTime?
  resetToken             String?
  resetTokenExpiry       DateTime?
  position               String?
  employeeCode           String?                @unique
  department             String?                @db.VarChar(255)
  activityLogs           ActivityLog[]
  assignedTasks          ProjectTask[]          @relation("TaskAssignee")
  timesheetEditHistories TimesheetEditHistory[] @relation("UserEditHistory")
  userRoles              UserRole[]
  projectTeamMembers     ProjectTeamMember[]
  projectTimelines       ProjectTimeline[]
  projects               Project[]              @relation("ProjectManager")
  approved_timesheets    Timesheet[]            @relation("TimesheetApprover")
  timesheets             Timesheet[]
  reportedProgresses     ProjectProgress[]      @relation("ProjectProgress_reporter")

  @@map("users")
}

model Project {
  name               String
  description        String?
  status             String              @default("ACTIVE")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  id                 String              @id @default(uuid()) @db.Uuid
  managerId          String?             @db.Uuid
  isDeleted          Boolean             @default(false)
  budget             Decimal?            @db.Decimal(15, 2)
  endDate            DateTime?
  startDate          DateTime?
  customerName       String?
  jobCode            String?
  paymentCondition   String?
  paymentTerm        String?
  escalated          Boolean?            @default(false)
  projectTasks       ProjectTask[]
  projectTeamMembers ProjectTeamMember[]
  projectTimelines   ProjectTimeline[]
  manager            User?               @relation("ProjectManager", fields: [managerId], references: [id])
  timesheets         Timesheet[]
  projectProgresses  ProjectProgress[]
  projectCosts       ProjectCost[]

  @@map("projects")
}

model Timesheet {
  description      String
  activity         String?                @db.VarChar(100)
  approved_at      DateTime?              @map("approved_at") @db.Timestamp(6)
  approved_by      String?                @map("approved_by") @db.Uuid
  billable         Boolean?               @default(true)
  created_at       DateTime?              @default(now()) @map("created_at") @db.Timestamp(6)
  date             DateTime               @db.Date
  hourly_rate      Decimal?               @db.Decimal(10, 2)
  hours_worked     Decimal                @db.Decimal(4, 2)
  overtime_hours   Decimal?               @default(0) @db.Decimal(4, 2)
  project_id       String?                @map("project_id") @db.Uuid
  rejection_reason String?                @map("rejection_reason")
  status           String?                @default("draft") @db.VarChar(20)
  sub_work_type    String?                @default("SOFTWARE") @db.VarChar(20)
  submitted_at     DateTime?              @db.Timestamp(6)
  updated_at       DateTime?              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  user_id          String?                @map("user_id") @db.Uuid
  work_type        String?                @default("PROJECT") @db.VarChar(20)
  id               String                 @id @default(uuid()) @db.Uuid
  projectTaskId    String?                @db.Uuid
  editHistories    TimesheetEditHistory[] @relation("TimesheetHistory")
  approver         User?                  @relation("TimesheetApprover", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projectTask      ProjectTask?           @relation(fields: [projectTaskId], references: [id])
  project          Project?               @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             User?                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, project_id, date, work_type, sub_work_type])
  @@index([date], map: "idx_timesheets_date_range")
  @@index([project_id], map: "idx_timesheets_project")
  @@index([status], map: "idx_timesheets_status")
  @@index([user_id, date], map: "idx_timesheets_user_date")
  @@map("timesheets")
}

model TimesheetEditHistory {
  id          String    @id @default(uuid()) @db.Uuid
  timesheetId String    @db.Uuid
  userId      String    @db.Uuid
  action      String
  oldValue    Json?
  newValue    Json?
  createdAt   DateTime  @default(now())
  timesheet   Timesheet @relation("TimesheetHistory", fields: [timesheetId], references: [id])
  user        User      @relation("UserEditHistory", fields: [userId], references: [id])
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  roleId String @db.Uuid
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(uuid()) @db.Uuid
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model ProjectTask {
  id           String        @id @default(uuid()) @db.Uuid
  projectId    String        @db.Uuid
  name         String
  description  String?
  status       String        @default("TODO")
  assigneeId   String?       @db.Uuid
  dueDate      DateTime?
  priority     Int?          @default(1)
  parentTaskId String?       @db.Uuid
  createdBy    String?       @db.Uuid
  updatedBy    String?       @db.Uuid
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assignee     User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  parentTask   ProjectTask?  @relation("ParentTask", fields: [parentTaskId], references: [id])
  subTasks     ProjectTask[] @relation("ParentTask")
  project      Project       @relation(fields: [projectId], references: [id])
  timesheets   Timesheet[]
}

model ProjectTeamMember {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @db.Uuid
  userId    String   @db.Uuid
  role      String   @default("MEMBER")
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model ProjectProgress {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @db.Uuid
  progress    Int      @default(0)
  planned     Int?
  actual      Int?
  date        DateTime @default(now())
  status      String   @default("ON_TRACK")
  milestone   String?
  description String?
  reportedBy  String   @db.Uuid
  reportedAt  DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reporter    User     @relation("ProjectProgress_reporter", fields: [reportedBy], references: [id])

  @@map("project_progresses")
}

model ProjectTimeline {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @db.Uuid
  action      String
  description String
  userId      String   @db.Uuid
  metadata    Json?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@map("project_timelines")
}

model ActivityLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  type      String
  message   String
  severity  String   @default("info")
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Holiday {
  id          String   @id @default(uuid())
  date        DateTime
  name        String
  nameEn      String
  type        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
