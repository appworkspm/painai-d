// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid()) @db.Uuid
  employeeCode        String?   @unique // Employee code from original system
  email               String    @unique
  password            String
  name                String
  role                String    @default("USER") // ADMIN, MANAGER, USER
  isActive            Boolean   @default(true)
  position            String?   // Job position
  resetToken          String?
  resetTokenExpiry    DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastLogin           DateTime?
  failedLoginAttempts Int?      @default(0)
  lockedUntil         DateTime?
  isDeleted           Boolean   @default(false)

  // Relations
  timesheets             Timesheet[]
  approved_timesheets    Timesheet[]            @relation("TimesheetApprover")
  projects               Project[]              @relation("ProjectManager")
  userRoles              UserRole[]
  timesheetEditHistories TimesheetEditHistory[] @relation("UserEditHistory")
  assignedTasks          ProjectTask[]          @relation("TaskAssignee")
  projectTeamMembers     ProjectTeamMember[]
  projectTimelines       ProjectTimeline[]
  activityLogs           ActivityLog[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  status      String   @default("ACTIVE") // ACTIVE, COMPLETED, ON_HOLD, CANCELLED, ESCALATED_TO_SUPPORT, SIGNED_CONTRACT
  managerId   String?  @db.Uuid
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal? @db.Decimal(15, 2)
  jobCode     String?  // Job code for the project
  customerName String? // Customer name for the project
  paymentTerm String?  // Payment term for the project
  paymentCondition String? // Payment condition for the project
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Relations
  manager      User?         @relation("ProjectManager", fields: [managerId], references: [id])
  timesheets   Timesheet[]
  projectTasks ProjectTask[]
  projectTeamMembers ProjectTeamMember[]
  projectTimelines ProjectTimeline[]

  @@map("projects")
}

model Timesheet {
  id               String                 @id @default(uuid()) @db.Uuid
  user_id          String?                @map("user_id") @db.Uuid
  project_id       String?                @map("project_id") @db.Uuid
  work_type        String?                @default("PROJECT") @db.VarChar(20) // PROJECT, NON_PROJECT
  sub_work_type    String?                @default("SOFTWARE") @db.VarChar(20) // SOFTWARE, HARDWARE, MEETING, etc.
  activity         String?                @db.VarChar(100) // Specific activity type
  date             DateTime               @db.Date
  hours_worked     Decimal                @db.Decimal(4, 2)
  overtime_hours   Decimal?               @default(0) @db.Decimal(4, 2)
  description      String
  status           String?                @default("draft") @db.VarChar(20) // draft, submitted, approved, rejected
  submitted_at     DateTime?              @db.Timestamp(6)
  approved_by      String?                @map("approved_by") @db.Uuid
  approved_at      DateTime?              @map("approved_at") @db.Timestamp(6)
  rejection_reason String?                @map("rejection_reason")
  billable         Boolean?               @default(true)
  hourly_rate      Decimal?               @db.Decimal(10, 2)
  created_at       DateTime?              @default(now()) @map("created_at") @db.Timestamp(6)
  updated_at       DateTime?              @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  approver         User?                  @relation("TimesheetApprover", fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project          Project?               @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             User?                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectTaskId    String?                @db.Uuid
  projectTask      ProjectTask?           @relation(fields: [projectTaskId], references: [id])
  editHistories    TimesheetEditHistory[] @relation("TimesheetHistory")

  @@unique([user_id, project_id, date, work_type, sub_work_type])
  @@index([date], map: "idx_timesheets_date_range")
  @@index([project_id], map: "idx_timesheets_project")
  @@index([status], map: "idx_timesheets_status")
  @@index([user_id, date], map: "idx_timesheets_user_date")
  @@map("timesheets")
}

model TimesheetEditHistory {
  id          String    @id @default(uuid()) @db.Uuid
  timesheetId String    @db.Uuid
  userId      String    @db.Uuid
  action      String // edit, submit, approve, reject
  oldValue    Json?
  newValue    Json?
  createdAt   DateTime  @default(now())
  timesheet   Timesheet @relation("TimesheetHistory", fields: [timesheetId], references: [id])
  user        User      @relation("UserEditHistory", fields: [userId], references: [id])
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @db.Uuid
  @@unique([userId, roleId])
}

model RolePermission {
  id           String      @id @default(uuid()) @db.Uuid
  role         Role        @relation(fields: [roleId], references: [id])
  roleId       String      @db.Uuid
  permission   Permission  @relation(fields: [permissionId], references: [id])
  permissionId String      @db.Uuid
  @@unique([roleId, permissionId])
}

model ProjectTask {
  id           String        @id @default(uuid()) @db.Uuid
  projectId    String        @db.Uuid
  name         String
  description  String?
  status       String        @default("TODO")
  assigneeId   String?       @db.Uuid
  dueDate      DateTime?
  priority     Int?          @default(1)
  parentTaskId String?       @db.Uuid
  createdBy    String?       @db.Uuid
  updatedBy    String?       @db.Uuid
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  project      Project       @relation(fields: [projectId], references: [id])
  assignee     User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  parentTask   ProjectTask?  @relation("ParentTask", fields: [parentTaskId], references: [id])
  subTasks     ProjectTask[] @relation("ParentTask")
  timesheets   Timesheet[]
}

model ProjectTeamMember {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @db.Uuid
  userId    String   @db.Uuid
  role      String   @default("MEMBER") // MANAGER, MEMBER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_team_members")
}

model ProjectTimeline {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @db.Uuid
  action      String   // task_created, task_completed, member_added, member_removed, etc.
  description String
  userId      String   @db.Uuid
  metadata    Json?    // Additional data like task name, member name, etc.
  createdAt   DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("project_timelines")
}

model ActivityLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  user      User?    @relation(fields: [userId], references: [id])
  type      String
  message   String
  severity  String   @default("info")
  createdAt DateTime @default(now())
}

model Holiday {
  id          String   @id @default(uuid())
  date        DateTime
  name        String
  nameEn      String
  type        String   // PUBLIC_HOLIDAY, GOVERNMENT_HOLIDAY, BANK_HOLIDAY
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
